def generate_report(original_text, reconstructed_text, sources):
    text_type = analyze_text_type(original_text)
    
    report = f"""
--- RECONSTRUCTION REPORT ---

[ORIGINAL FRAGMENT]
> "{original_text}"

[AI-RECONSTRUCTED TEXT]
> "{reconstructed_text}"

[TEXT ANALYSIS]
- Type: {text_type}
- Era: {analyze_text_era(original_text)}
- Platform Context: {analyze_platform_context(original_text)}
- Confidence: High

[CONTEXTUAL SOURCES]
Found {len(sources)} relevant sources:
"""
    
    for i, source in enumerate(sources, 1):
        report += f"\n{i}. {source['title']}\n   üìç URL: {source['link']}\n   üìù {source['snippet']}\n"
    
    interpretation_notes = get_detailed_interpretation_notes(original_text, reconstructed_text)
    if interpretation_notes:
        report += f"\n[DETAILED INTERPRETATION]\n{interpretation_notes}"
    
    report += f"\nGenerated by Project Chronos - AI Digital Archaeologist"
    
    return report

def analyze_text_type(text):
    text_lower = text.lower()
    
    if any(term in text_lower for term in ['brb', 'afk', 'lol', 'omg', 'ttyl', 'imo', 'wtf', 'smh', 'g2g']):
        return "Internet Slang/Acronyms"
    elif any(term in text_lower for term in ['ancient', 'scroll', 'manuscript', 'historical', 'artifact']):
        return "Historical/Archeological Text"
    elif any(term in text_lower for term in ['fragment', 'partial', 'incomplete', 'damaged']):
        return "Fragmented Text"
    else:
        return "General Text"

def analyze_text_era(text):
    text_lower = text.lower()
    
    if any(term in text_lower for term in ['top 8', 'myspace', 'friendster']):
        return "Early Social Media (2000s)"
    elif any(term in text_lower for term in ['tiktok', 'instagram', 'snapchat']):
        return "Modern Social Media (2010s+)"
    elif any(term in text_lower for term in ['brb', 'afk', 'a/s/l']):
        return "Chat Room Era (1990s-2000s)"
    else:
        return "General Internet Era"

def analyze_platform_context(text):
    text_lower = text.lower()
    
    if 'top 8' in text_lower:
        return "MySpace Social Platform"
    elif any(term in text_lower for term in ['subreddit', 'upvote', 'ama']):
        return "Reddit Platform"
    elif any(term in text_lower for term in ['hashtag', 'retweet', 'tweet']):
        return "Twitter/X Platform"
    elif any(term in text_lower for term in ['filter', 'story', 'reel']):
        return "Instagram Platform"
    else:
        return "General Digital Communication"

def get_detailed_interpretation_notes(original_text, reconstructed_text):
    text_lower = original_text.lower()
    notes = []
    
    # MySpace specific interpretations
    if 'top 8' in text_lower:
        notes.append("‚Ä¢ **Top 8**: Reference to MySpace's 'Top Friends' feature (2003-2010) where users could display their 8 closest friends, often causing social drama")
        notes.append("‚Ä¢ **MySpace Context**: The order of friends in Top 8 was publicly visible and frequently changed, leading to social tensions")
    
    # Internet slang with historical context
    if 'smh' in text_lower:
        notes.append("‚Ä¢ **SMH**: 'Shaking My Head' - expresses disappointment or disbelief, originated in early 2000s internet forums")
    
    if 'ppl' in text_lower:
        notes.append("‚Ä¢ **PPL**: Abbreviation for 'People' - common in early SMS and instant messaging due to character limits")
    
    if 'g2g' in text_lower:
        notes.append("‚Ä¢ **G2G**: 'Got To Go' - indicates urgent departure, popular in AIM and early chat platforms")
    
    if 'ttyl' in text_lower:
        notes.append("‚Ä¢ **TTYL**: 'Talk To You Later' - standard chat closing from ICQ/AIM/MSN Messenger era")
    
    # Cultural context notes
    if 'drama' in text_lower and 'top 8' in text_lower:
        notes.append("‚Ä¢ **Social Dynamics**: MySpace Top 8 famously caused real-world friendship conflicts and social anxiety")
    
    if notes:
        return "\n".join(notes)
    return ""